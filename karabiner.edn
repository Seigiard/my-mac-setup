{:profiles {:Default {:default true
                      :sim     50     ;; simultaneous_threshold_milliseconds (def: 50)
                        ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
                      :delay   150    ;; to_delayed_action_delay_milliseconds (def: 500)
                        ;; after :delay ms, the key press is considered to be delayed (used for double-press macros)
                      :alone   500    ;; to_if_alone_timeout_milliseconds (def: 1000)
                        ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
                      :held    500    ;; to_if_held_down_threshold_milliseconds (def: 500)
                        ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
}} ;; profiles

 :templates {; define the script monstrosity in one place as a template
             :sym "osascript -e 'set temp to the clipboard \n set the clipboard to \"%s\" \n tell application \"System Events\" \n   keystroke \"v\" using command down \n   delay 0.05 \n end tell \n set the clipboard to temp'"}

 ;; LAYERS
 :layers {:caps-mode {:key :caps_lock :alone {:key :vk_none}}} ;; layers

 :input-sources {:en-birman {:input_source_id "^org.sil.ukelele.keyboardlayout.t.english-ilyabirmantypography$"}
                 :ru-birman {:input_source_id "^org.sil.ukelele.keyboardlayout.t.russian-ilyabirmantypography$"}}

 ;; BINDINGS
 :main
 [{:des "Left Opt → Birman En, Right Opt → Birman Ru"
   :rules [[:condi :!rdp :!parallels]
           [:left_command      :left_command  nil  {:alone {:input :en-birman}}]
           [:right_command     :right_command nil {:alone {:input :ru-birman}}]]}

  {:des "caps lock mode: replace arrows to jkil"
   :rules [:caps-mode
          ;; caps lock : arrow mode
           [:##j :##left_arrow]
           [:##k :##down_arrow]
           [:##i :##up_arrow]
           [:##l :##right_arrow]

           [:##f :left_option]
           [:##d :left_shift]

           [:##h :!Cleft_arrow]
           [:##semicolon :!Cright_arrow]
           [:##u :!Cup_arrow]
           [:##o :!Cdown_arrow]]}

  {:des "Cmd+Opt+3 as #" :rules [[:!CO3 [:sym "#"]] [:!QE3 [:sym "#"]] [:!QO3 [:sym "#"]] [:!CE3 [:sym "#"]]]}

  ;; {:des "Disable Arrows"
  ;;  :rules [[:left_arrow :vk_none]
  ;;          [:right_arrow :vk_none]
  ;;          [:up_arrow :vk_none]
  ;;          [:down_arrow :vk_none]]}
  ]

 ;; code won't read cheatsheet section
 ;; ! stand for mandatory
 ;; # stand for optional
 ;; C T O S for left command control optional shift
 ;; F for fn
 ;; need to prefix C T O S F with ! or #

 ;; !  | means mandatory
 ;; #  | means optional
 ;; C  | left_command
 ;; T  | left_control
 ;; O  | left_option
 ;; S  | left_shift
 ;; F  | fn
 ;; Q  | right_command
 ;; W  | right_control
 ;; E  | right_option
 ;; R  | right_shift
 ;; P  | caps_lock
 ;; !! | mandatory command + control + optional + shift (hyper)
 ;; ## | optional any
 :cheatsheet {:!Ca "command a" ;; mandatory left_command
              :!Ta "control a" ;; mandatory left_control
              :!Oa "option a"
              :!Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :!CTOa "command control option a"
              :!Cspacebar "command space"
              :!Fa "fn a"
              :##a "keycode a optional any"
              :!!a "mandatory hyper(control command option shift) a "}}