{:profiles {:Default {:default true
                      :sim     50     ;; simultaneous_threshold_milliseconds (def: 50)
                        ;; if keydown event for two different keys are pressed within :sim ms, the keypresses are considered simultaneous
                      :delay   150    ;; to_delayed_action_delay_milliseconds (def: 500)
                        ;; after :delay ms, the key press is considered to be delayed (used for double-press macros)
                      :alone   300    ;; to_if_alone_timeout_milliseconds (def: 1000)
                        ;; if keyup event comes within :alone ms from keydown, the key is not just pressed but held
                      :held    300    ;; to_if_held_down_threshold_milliseconds (def: 500)
                        ;; key is fired twice when :held ms is elapsed (otherwise seen as a hold command) (TODO WHAT IS THIS??)
}} ;; profiles

:templates {; define the script monstrosity in one place as a template
             :eng-tilda-mapping "hidutil property --set '{\"UserKeyMapping\": []}'"
             :cyr-tilda-mapping "hidutil property --set '{\"UserKeyMapping\": [{\"HIDKeyboardModifierMappingSrc\": 0x700000064, \"HIDKeyboardModifierMappingDst\": 0x700000035}, {\"HIDKeyboardModifierMappingSrc\": 0x700000035, \"HIDKeyboardModifierMappingDst\": 0x700000064}]}'"
            }

 ;; LAYERS
 :layers {:caps-mode {:key :caps_lock :alone {:key :vk_none}}} ;; layers

 :input-sources {:eng-seigiard {:input_source_id "^org.sil.ukelele.keyboardlayout.seigiardlayout.english-seigiardtypography$"}
                 :cyr-seigiard {:input_source_id "^org.sil.ukelele.keyboardlayout.seigiardlayout.cyrillic-seigiardtypography$"}}

 ;; BINDINGS
 :main
 [{:des "Left Cmd → Seigiard Cyr, Right Cmd → Seigiard Cyr"
   :rules [[:condi :!rdp :!parallels]
           [:left_command      :left_command  nil  {:alone [{:input :eng-seigiard} [:eng-tilda-mapping]]}]
           [:right_command     :right_command nil {:alone [{:input :cyr-seigiard} [:cyr-tilda-mapping]]}]
           ]}

  {:des "caps lock mode: replace arrows to hjkl"
   :rules [:caps-mode
          ;; caps lock : arrow mode
           [:##h :##left_arrow]
           [:##j :##down_arrow]
           [:##k :##up_arrow]
           [:##l :##right_arrow]

           [:##f :left_option]
           [:##d :left_shift]

           [:##h :!Cleft_arrow]
           [:##semicolon :!Cright_arrow]
           [:##u :!Cup_arrow]
           [:##o :!Cdown_arrow]]}

  ;; {:des "Disable Arrows"
  ;;  :rules [[:left_arrow :vk_none]
  ;;          [:right_arrow :vk_none]
  ;;          [:up_arrow :vk_none]
  ;;          [:down_arrow :vk_none]]}
  ]

 ;; code won't read cheatsheet section
 ;; ! stand for mandatory
 ;; # stand for optional
 ;; C T O S for left command control optional shift
 ;; F for fn
 ;; need to prefix C T O S F with ! or #

 ;; !  | means mandatory
 ;; #  | means optional
 ;; C  | left_command
 ;; T  | left_control
 ;; O  | left_option
 ;; S  | left_shift
 ;; F  | fn
 ;; Q  | right_command
 ;; W  | right_control
 ;; E  | right_option
 ;; R  | right_shift
 ;; P  | caps_lock
 ;; !! | mandatory command + control + optional + shift (hyper)
 ;; ## | optional any
 :cheatsheet {:!Ca "command a" ;; mandatory left_command
              :!Ta "control a" ;; mandatory left_control
              :!Oa "option a"
              :!Sa "shift a"
              :#Sa "shift a" ;; keycode a, optional left_shift
              :!CTOa "command control option a"
              :!Cspacebar "command space"
              :!Fa "fn a"
              :##a "keycode a optional any"
              :!!a "mandatory hyper(control command option shift) a "}}
